###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
### However, ejabberd treats different literals as different types:
###
### - unquoted or single-quoted strings. They are called "atoms".
###   Example: dog, 'Jupiter', '3.14159', YELLOW
###
### - numeric literals. Example: 3, -45.0, .0
###
### - quoted or folded strings.
###   Examples of quoted string: "Lizzard", "orange".
###   Example of folded string:
###   > Art thou not Romeo,
###     and a Montague?
###
#
---
## loglevel: Verbosity of log files generated by ejabberd
## 0: No ejabberd log at all (not recommended)
## 1: Critical
## 2: Error
## 3: Warning
## 4: Info
## 5: Debug
{% if system.debug %}
loglevel: 5
{% else %}
loglevel: 4
{% endif %}

## rotation: Disable ejabberd's internal log rotation, as the Debian package
## uses logrotate(8).
log_rotate_count: 0
log_rotate_date: ""

## overload protection: If you want to limit the number of messages per second
## allowed from error_logger, which is a good idea if you want to avoid a flood
## of messages when system is overloaded, you can set a limit.
## 100 is ejabberd's default.
log_rate_limit: 100

## watchdog_admins: Only useful for developers: if an ejabberd process
## consumes a lot of memory, send live notifications to these XMPP accounts.
{% if system.devel %}
watchdog_admins:
  - "postmaster@{{ network.domain }}"
{% endif %}

## hosts: Domains served by ejabberd.
## You can define one or several, for example:
## hosts:
##   - "example.net"
##   - "example.com"
##   - "example.org"
###.  ================
###'  SERVED HOSTNAME
hosts:
  - "{{ network.domain }}"

host_config:
  "conference.{{ network.domain }}":
    domain_certfile: "/etc/ejabberd/conference.pem"

## TLS configuration
define_macro:
  'TLS_CIPHERS': "HIGH:!aNULL:!eNULL:!3DES:@STRENGTH"
  'TLS_OPTIONS':
    - "no_sslv3"
    - "no_sslv2"
    - "no_tlsv1"
    - "no_tlsv1_1"
    - "cipher_server_preference"
    - "no_compression"
    ## 'DH_FILE': "/path/to/dhparams.pem"
    ## generated with: openssl dhparam -out dhparams.pem 2048

c2s_ciphers: 'TLS_CIPHERS'
s2s_ciphers: 'TLS_CIPHERS'
c2s_protocol_options: 'TLS_OPTIONS'
s2s_protocol_options: 'TLS_OPTIONS'
## c2s_dhfile: 'DH_FILE'
## s2s_dhfile: 'DH_FILE'

listen:
  -
    port: 5222
    ip: "::"
    module: ejabberd_c2s
    certfile: "/etc/ejabberd/default.pem"
    dhfile: "/etc/ejabberd/c2s-dh.pem"
    starttls: true
    starttls_required: true
    max_stanza_size: 65536
    shaper: c2s_shaper
    access: c2s
    starttls_required: true
    protocol_options: 'TLS_OPTIONS'
    zlib: true
    resend_on_timeout: if_offline
  -
    port: 5223
    ip: "::"
    module: ejabberd_c2s
    certfile: "/etc/ejabberd/default.pem"
    dhfile: "/etc/ejabberd/c2s-dh.pem"
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
    tls: true
    protocol_options: 'TLS_OPTIONS'
{% if ejabberd.s2s.active %}
  -
    port: 5269
    ip: "::"
    module: ejabberd_s2s_in
    starttls: '{{ ejabberd.s2s.use_starttls }}'
    certfile: "/etc/ejabberd/default.pem"
    dhfile: "/etc/ejabberd/s2s-dh.pem"
{% endif %}
  -
    port: 5280
    ip: "::"
    module: ejabberd_http
    request_handlers:
      "/api": mod_http_api
      "/bosh": mod_bosh
      "/upload": mod_http_upload
      "/ws": ejabberd_http_ws
    ## captcha: true
    ## register: true
    tls: true
    protocol_options: 'TLS_OPTIONS'
    web_admin: true

## Disabling digest-md5 SASL authentication. digest-md5 requires plain-text
## password storage (see auth_password_format option).
disable_sasl_mechanisms:
  - "digest-md5"
  - "X-OAUTH2"

s2s_use_starttls: required

###.  ==============
###'  AUTHENTICATION

##
## Authentication using LDAP
##
auth_method: ldap
ldap_servers:
  - "ldap.{{ network.domain }}"
ldap_encrypt: none
ldap_port: 389
ldap_rootdn: "{{ ldap.readonly.dn }}"
ldap_password: "{{ lookup('password', ldap.roPasswdParams) }}"
ldap_base: "{{ ldap.organization.base }}"
ldap_filter: "(objectClass=shadowAccount)"
ldap_uids:
  - "mail": "%u@{{ network.domain }}"

## Full path to a script that generates the image.
## captcha_cmd: "/usr/share/ejabberd/captcha.sh"

###.   ====================
###'   ACCESS CONTROL LISTS
acl:
  ## The 'admin' ACL grants administrative privileges to XMPP accounts.
  ## You can put here as many accounts as you want.
  admin:
    user:
      - "@localhost"
      - "postmaster": "{{ network.domain }}"
  ## Users from the domain
  local_users:
    server:
      - "{{ network.domain }}"
  ## Local users: don't modify this.
  local:
    user_regexp: ""
  ## Loopback IP address
  loopback:
    ip:
      - "127.0.0.0/8"
      - "::1/128"
{% if ejabberd.s2s.active %}
{% if not ejabberd.s2s.public %}
  ## trusted servers for s2s
  trusted_servers:
    server:
{% for server in ejabberd.s2s.trust %}
      - "{{ server }}"
{% endfor %}
{% endif %}
{% endif %}

###.  ============
###'  ACCESS RULES
access_rules:
  ## This rule allows access only for local users:
  local:
    - allow: local
  ## Only non-blocked users can use c2s connections:
  c2s:
    - deny: blocked
    - allow
  ## Only admins can send announcement messages:
  announce:
    - allow: admin
  ## Only admins can use the configuration interface:
  configure:
    - allow: admin
  ## Only accounts of the local ejabberd server can create rooms:
  muc_create:
    - allow: local
    - allow: local_users
  ## Only administrators can access MUC logs
  muc_log:
    - allow: admin
  ## Only accounts on the local ejabberd server can create Pubsub nodes:
  pubsub_createnode:
    - allow: local
  proxy65_access:
    - allow: local_users
  ## In-band registration allows registration of any possible username.
  ## To disable in-band registration, replace 'allow' with 'deny'.
  register:
    - deny
  ## Only allow to register from localhost
  trusted_network:
    - allow: loopback
  ## Allow or restrict access to/from other Jabber servers
{% if ejabberd.s2s.active %}
  s2s:
{% if ejabberd.s2s.public %}
    - allow
{% else %}
    - allow: trusted_servers
{% endif %}
{% endif %}

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      - access:
          - allow:
            - acl: loopback
            - acl: admin
      - oauth:
        - scope: "ejabberd:admin"
        - access:
          - allow:
            - acl: loopback
            - acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      - ip: "127.0.0.1/8"
    what:
      - "status"
      - "connected_users_number"

      ###.  ===============
      ###'  TRAFFIC SHAPERS

shaper:
  normal: {{ ejabberd.shaper.normal }}
  fast:  {{ ejabberd.shaper.fast }}
  proxyrate:  {{ ejabberd.shaper.proxyrate }}  # file transfer speed

###.  ============
###'  SHAPER RULES

shaper_rules:
  ## Maximum number of simultaneous sessions allowed for a single user:
  max_user_sessions: 10
  ## Maximum number of offline messages that users can have:
  max_user_offline_messages:
    - 5000: admin
    - 100
  ## For C2S connections, all users except admins use the "normal" shaper
  c2s_shaper:
    - none: admin
    - normal
  ## All S2S connections use the "fast" shaper
{% if ejabberd.s2s.active %}
  s2s_shaper: fast
{% endif %}
  # proxy users for file transfer
  proxy65_shaper:
    - proxyrate: local_users

## This option specifies the maximum number of elements in the queue
## of the FSM. Refer to the documentation for details.
max_fsm_queue: 1000

modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  ## mod_delegation: {}   # for xep0356
  mod_disco: {}
  mod_echo: {}
{% if ejabberd.fail2ban.active %}
  ### ejabberd fail2ban module
  mod_fail2ban:
    c2s_auth_ban_lifetime: {{ ejabberd.fail2ban.lifetime }}
    c2s_max_auth_failures: {{ ejabberd.fail2ban.failures }}
{% endif %}
  mod_http_api: {}
  ## mod_http_upload:
  ##   put_url: "https://@HOST@:5443/upload"
  mod_last: {}
  ## mod_mam:
  ##   ## Mnesia is limited to 2GB, better to use an SQL backend
  ##   ## For small servers SQLite is a good fit and is very easy
  ##   ## to configure. Uncomment this when you have SQL configured:
  ##   ## db_type: sql
  ##   assume_mam_usage: true
  ##   default: always
  mod_muc:
    host: "conference.{{ network.domain }}"
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    default_room_options:
      mam: true
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  # mod_pres_counter:
  #   count: 5
  #   interval: 60
  mod_privacy: {}
  mod_private: {}
  ## mod_proxy65: {}
  mod_pubsub:
    access_createnode: pubsub_createnode
    # reduces resource comsumption, but XEP incompliant
    ignore_pep_from_offline: true
    # XEP compliant, but increases resource comsumption
    # ignore_pep_from_offline: false
    last_item_cache: false
    plugins:
      - "flat"
      - "hometree"
      - "pep"
    force_node_config:
      "eu.siacs.conversations.axolotl.*":
        access_model: open
      ## Avoid buggy clients to make their bookmarks public
      "storage:bookmarks":
        access_model: whitelist
  ### Implements SOCKS5 Bytestreams (XEP-0065). It allows ejabberd to act as
  ### a file transfer proxy between two XMPP clients.
  mod_proxy65:
    host: "proxy.{{ network.domain }}"
    name: "File Transfer Proxy"
    ip: "::"
    port: {{ ejabberd.file_transfer.port }}
    max_connections: 5
    access: proxy65_access
    shaper: proxy65_shaper
  mod_push: {}
  mod_push_keepalive: {}
  ## mod_register:
  ##   ## Only accept registration requests from the "trusted"
  ##   ## network (see access_rules section above).
  ##   ## Think twice before enabling registration from any
  ##   ## address. See the Jabber SPAM Manifesto for details:
  ##   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  ##   ip_access: trusted_network
  mod_roster:
    versioning: true
    access:
    - allow
  ### Add contacts from the same directory
  mod_shared_roster_ldap:
    ldap_rfilter: "(&(objectClass=posixGroup)(memberUid=%u))"
    ldap_gfilter: "(&(objectClass=posixGroup)(cn=%g))"
    ldap_ufilter: "(&(objectClass=posixAccount)(uid=%u))"
    ldap_filter: "(cn=*)"
    ldap_groupattr: "cn"
    ldap_groupdesc: "displayName"
    ldap_userdesc: "cn"
    ldap_useruid: "uid"
  ### Statistics Gathering (XEP-0039).
  mod_stats: {}
  ### Support for Entity Time (XEP-0202), discover the time at another entity’s location.
  mod_time: {}
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_sic: {}
  mod_stream_mgmt:
    resend_on_timeout: if_offline
  ### Map LDAP attributes to vCard fields
  mod_vcard_ldap:
    search: true
    ldap_base: "{{ ldap.users.dn }}"
    # VCARD pattern
    ldap_vcard_map:
      "NICKNAME": { "%u": [] } # just use user's part of JID as his nickname
      "GIVEN":    { "%s": [ "givenName" ] }
      "FAMILY":   { "%s": [ "sn" ] }
      "FN":       { "%s %s": [ "givenName", "sn" ] }
      "EMAIL":    { "%s": [ "mail" ] }
      "PHOTO":    { "%s": [ "jpegPhoto"] }
    # Search form
    ldap_search_fields:
      "User ID": "%u"
      "First Name": "givenName"
      "Last Name": "sn"
      "Email": "mail"
    # vCard fields to be reported. Note that JID is always returned with search results
    ldap_search_reported:
      "User ID": "%u"
      "First Name": "givenName"
      "Last Name": "sn"
      "Email": "mail"
  ### Store an avatar in the user vCard
  mod_vcard_xupdate: {}
  ### Show eJabberd version, but not the OS
  mod_version:
    show_os: false
  ### Offline file sharing on a specific directory
  mod_http_upload:
    docroot: "/var/www/ejabberd/files"
    put_url: "https://xmpp.{{ network.domain }}/upload"
    get_url: "https://xmpp.{{ network.domain }}/upload"
    dir_mode: "0755"
    file_mode: "0644"
    thumbnail: {{ ejabberd.http_upload.thumbnail | ternary('true','false') }}
    max_size: {{ ejabberd.http_upload.max_size }}
    secret_length: {{ ejabberd.http_upload.secret_length }}
    access: local
  ### Message Archive Management
  mod_mam:
    default: roster

## Enable modules management via ejabberdctl for installation and
## uninstallation of public/private contributed modules
## (enabled by default)
allow_contrib_modules: {{ ejabberd.allow_contrib_modules }}

###.  ================
###'  DEFAULT LANGUAGE

##
## language: Default language used for server messages.
##
language: "{{ dictionaries[0].id }}"

### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8
