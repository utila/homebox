---

- name: Get the passwords generated in the accounts tasks
  tags: facts
  set_fact:
    roPasswdParams: "{{ backup_directory }}/ldap/readonly.pwd length=16 chars=ascii_letters,digits"

- name: Make sure we can install packages through https
  tags: apt
  apt:
    name: apt-transport-https
    state: present

- name: Add gogs GPG key
  register: apt_config
  tags: apt
  apt_key:
    url: https://dl.packager.io/srv/pkgr/gogs/key
    state: present

- name: Add gogs repository
  when: apt_config.changed
  tags: apt
  apt_repository:
    repo: deb https://dl.packager.io/srv/deb/pkgr/gogs/pkgr/debian 9 main
    state: present
    filename: gogs

- name: Install the gogs package
  register: gogs_pkg
  tags: apt
  apt:
    update_cache: true
    name: gogs
    state: present

# PostgreSQL installation =====================================================
- name: Update packages cache
  tags: apt
  apt:
    name: python-psycopg2
    state: present

- name: Set facts for postgresql password generation
  tags: postgresql, facts
  set_fact:
    password_path: "{{ backup_directory }}/postgresql/admin.pwd"
    password_params: "length=16 chars=ascii_letters,digits"

- name: Generate a random password for postgresql gogs user
  tags: postgresql, facts
  no_log: true
  set_fact:
    gogs_pg_password: '{{ lookup("password", "{{ password_path }} {{ password_params }}") }}'

- name: Create the database user
  tags: postgresql
  become: true
  become_user: postgres
  postgresql_user:
    name: gogs
    password: '{{ gogs_pg_password }}'

- name: Create the Gogs database
  tags: postgresql
  become: true
  become_user: postgres
  postgresql_db:
    name: gogs
    owner: gogs

- name: Remove Python pgsql package
  when: gogs_pkg.changed
  tags: apt
  apt:
    name: python-psycopg2
    state: absent

# Gogs configuration ==========================================================
- name: Set facts for session key
  tags: facts
  set_fact:
    session_path: "{{ backup_directory }}/gogs/session.pwd"
    session_params: "length=32 chars=ascii_letters,digits"

- name: Generate a random session key
  tags: facts
  no_log: true
  set_fact:
    gogs_session_key: '{{ lookup("password", "{{ session_path }} {{ session_params }}") }}'

- name: Create the configuration folder
  tags: config
  file:
    path: '{{ dir }}'
    state: directory
    owner: gogs
    group: gogs
    mode: '0755'
  with_items:
    - /opt/gogs/data
    - /etc/gogs/conf/auth.d
  loop_control:
    loop_var: dir

- name: Copy the gogs configuration
  tags: config
  notify:
    - Restart gogs web service
    - Restart gogs
  template:
    src: '{{ file.src }}'
    dest: '{{ file.dest }}'
    owner: gogs
    group: gogs
    mode: '0600'
  with_items:
    - src: app.ini
      dest: /etc/gogs/conf/app.ini
    - src: ldap_bind_dn.conf
      dest: /etc/gogs/conf/auth.d/ldap_bind_dn.conf
  loop_control:
    loop_var: file

# Web site configuration ======================================================

- name: Create the web site
  tags: nginx
  notify:
    - Check nginx config
    - Restart nginx
  vars:
    csp: '{{ gogs.csp | default(csp_default) }}'
    fp: '{{ gogs.fp | default(fp_default) }}'
  template:
    src: nginx.conf
    dest: '/etc/nginx/sites-available/gogs.{{ network.domain }}.conf'
    owner: root
    group: root
    mode: '0644'

- name: Copy nginx configuration
  tags: nginx
  notify:
    - Check nginx config
    - Restart nginx
  file:
    src: '/etc/nginx/sites-available/gogs.{{ network.domain }}.conf'
    dest: '/etc/nginx/sites-enabled/gogs.{{ network.domain }}.conf'
    state: link

# AppArmor configuration ======================================================

- name: Install nginx AppArmor profile
  tags: security, apparmor
  notify:
    - Activate AppArmor profile
    - Restart AppArmor service
  register: aa_config
  template:
    src: '{{ profile.src }}'
    dest: '{{ profile.dest }}'
  with_items:
    - src: apparmor.d/local/nginx-gogs-web.cf
      dest: /etc/apparmor.d/local/nginx-gogs-web
    - src: apparmor.d/usr.bin.gogs.cf
      dest: /etc/apparmor.d/usr.bin.gogs
    - src: apparmor.d/opt.gogs.gogs.cf
      dest: /etc/apparmor.d/opt.gogs.gogs
    - src: apparmor.d/opt.gogs.vendor.pkgr.processes.web.cf
      dest: /etc/apparmor.d/opt.gogs.vendor.pkgr.processes.web
  loop_control:
    loop_var: profile

- name: Check if AppArmor nginx configuration already contains the line
  register: line_found
  shell: >-
    grep -c 'include <local/nginx-gogs-web>'
    /etc/apparmor.d/usr.sbin.nginx
  changed_when: false
  failed_when: false

# Backup handling
- name: Add some patterns to exclude in the backups
  tags: backup
  lineinfile:
    path: /etc/homebox/backup-exclude
    line: '{{ line }}'
    state: '{{ gogs.backup | ternary("absent", "present") }}'
  with_items:
    - "# Gogs: Exclude repositories from backup"
    - '/home/gogs'
  loop_control:
    loop_var: line

- name: Add gogs AppArmor specific configuration
  when: line_found.stdout == '0'
  notify:
    - Activate AppArmor profile
    - Restart AppArmor service
  tags: security, apparmor
  lineinfile:
    path: /etc/apparmor.d/usr.sbin.nginx
    line: '  #include <local/nginx-gogs-web>'
    insertbefore: '# End of local includes for homebox'
